name: Test GitHub Actions
run-name: ${{ github.actor }} is updating new version with GitHub Actions 🚀

env:
  PROJECT_NAME: HEAT-BACKEND
  BUCKET_NAME: heat-back-s3
  CODE_DEPLOY_APP: heat-backend-application
  CODE_DEPLOY_DEPLOYMENT_GROUP: heat-backend-deploy-group
  
on:
#   pull_request:
   push:
    branches:
      - 'main'
#      - 'HEAT-42'

jobs:
  Explore-GitHub-Actions:
    runs-on: ubuntu-latest
    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.ENV_TOKEN }}

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      
      - name: Start MariaDB
        uses: getong/mariadb-action@v1.1
        with:
          mysql database: 'HEAT' 
          mysql user: 'test'
          mysql password: '1234'

      - name: Gradle build
        run: ./gradlew clean build
        
      - name: Zip the build file
        run: zip -r ./$PROJECT_NAME.zip .
        shell: bash
        
      # aws 인증서비스
      # github repository에서 Setting에서 사용할 암호화된 변수
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.AWS_REGION}}

      # Upload to S3 stroage
      - name: Upload to S3
        run: aws s3 cp $PROJECT_NAME.zip s3://$BUCKET_NAME/deploy/$PROJECT_NAME.zip --region ap-northeast-2  
      
      - run: echo "🍏 This job's status is ${{ job.status }}."
      
      # CodeDeploy에게 배포 명령을 내린다.
      - name: Code Deploy
        run: >
         aws deploy create-deployment --application-name $CODE_DEPLOY_APP
         --deployment-config-name CodeDeployDefault.AllAtOnce
         --deployment-group-name $CODE_DEPLOY_DEPLOYMENT_GROUP
         --s3-location bucket=$BUCKET_NAME,bundleType=zip,key=deploy/$PROJECT_NAME.zip
